package main

import (
	"fmt"
	"sync"
	//"time"
)

// func main() {

// 	fmt.Println("hello i am here")

// 	go func ()  {
// 		fmt.Println("i am a goroutines")
// 	} ()

// 	time.Sleep(1 * time.Second)
// }

//safer alternative
func main() {
	var wg sync.WaitGroup // 1Ô∏è‚É£ Create a wait group
	wg.Add(1)             // 2Ô∏è‚É£ Tell it: ‚ÄúWe're going to wait for 1 goroutine‚Äù

	go func() {
		defer wg.Done() // 4Ô∏è‚É£ When goroutine is done, mark it as done
		fmt.Println("i am a goroutines")
		
	}()

	fmt.Println("hello i am here")
	wg.Wait() // 3Ô∏è‚É£ Wait here until the goroutine signals it's done
}

/*
	‚ùì Why is using sync.WaitGroup safer than time.Sleep?
	üß™ Problem with time.Sleep:
		You're guessing how long the goroutine will take to finish.

		What if the goroutine takes longer than 1 second?

		Or finishes in 10 milliseconds and you‚Äôre wasting time sleeping unnecessarily?

		It doesn‚Äôt scale when you have multiple goroutines or more complex logic.

	‚ùå time.Sleep = unreliable, hard to manage, not scalable.

	‚úÖ Why sync.WaitGroup is better:
		It's synchronous: It waits exactly until all goroutines finish.

		No guessing or delays ‚Äî clean, predictable, and safe.

		Works for any number of goroutines.
*/